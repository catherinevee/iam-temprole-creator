Metadata-Version: 2.4
Name: iam-temprole-creator
Version: 0.1.0
Summary: AWS IAM Role Vending Machine for temporary contractor access
Author-email: IAM Team <iam-team@company.com>
License: MIT
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: boto3>=1.34.0
Requires-Dist: botocore>=1.34.0
Requires-Dist: click>=8.1.0
Requires-Dist: pydantic>=2.5.0
Requires-Dist: pydantic-settings>=2.1.0
Requires-Dist: cryptography>=41.0.0
Requires-Dist: pyotp>=2.9.0
Requires-Dist: rich>=13.7.0
Requires-Dist: typer>=0.9.0
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: moto>=4.2.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.7.0; extra == "dev"

# IAM Role Vending Machine

A secure AWS IAM Role Vending Machine for temporary contractor access with automatic expiration and configurable permission tiers.

## Features

- 🔐 **Secure Access**: Temporary IAM roles with automatic expiration (15 minutes to 36 hours)
- 🎯 **Permission Tiers**: Predefined access levels (read-only, developer, admin, break-glass)
- 🛡️ **Security Controls**: MFA enforcement, IP restrictions, permission boundaries
- 📊 **Audit Trail**: Comprehensive logging and monitoring
- 🚀 **Serverless Architecture**: API Gateway + Lambda + DynamoDB
- 💻 **CLI Interface**: Easy-to-use command-line tool
- 🔄 **Auto Cleanup**: Automatic cleanup of expired sessions

## Quick Start

### Prerequisites

- Python 3.11+
- AWS CLI configured
- Terraform
- AWS account with appropriate permissions

### Installation

1. **Clone the repository**:
   ```bash
   git clone <repository-url>
   cd iam-temprole-creator
   ```

2. **Deploy the infrastructure**:
   ```bash
   python deploy.py
   ```

3. **Install the CLI tool**:
   ```bash
   pip install -e .
   ```

### Usage

#### Request a Temporary Role

```bash
# Request read-only access for 4 hours
iam-role-vendor request-role \
  --project-id "my-project" \
  --user-id "john.doe" \
  --permission-tier "read-only" \
  --duration-hours 4 \
  --reason "Need to review S3 buckets for security audit" \
  --mfa-used

# Request developer access for 8 hours
iam-role-vendor request-role \
  --project-id "my-project" \
  --user-id "jane.smith" \
  --permission-tier "developer" \
  --duration-hours 8 \
  --reason "Deploying new Lambda functions" \
  --mfa-used \
  --output-format "aws-config" \
  --save-to-file "~/.aws/credentials-temp"
```

#### Check Session Status

```bash
# Check if a session is still active
iam-role-vendor check-status \
  --project-id "my-project" \
  --session-id "abc12345-def6-7890-ghij-klmnopqrstuv"
```

#### List Your Sessions

```bash
# List all your active sessions
iam-role-vendor list-sessions --user-id "john.doe"

# List only expired sessions
iam-role-vendor list-sessions --user-id "john.doe" --status "EXPIRED"
```

#### Revoke a Session

```bash
# Revoke a session before it expires
iam-role-vendor revoke-session \
  --project-id "my-project" \
  --session-id "abc12345-def6-7890-ghij-klmnopqrstuv"
```

## Permission Tiers

| Tier | Description | Max Duration | MFA Required | Access Level |
|------|-------------|--------------|--------------|--------------|
| **read-only** | View-only access to S3, EC2, IAM | 36 hours | Yes | Read-only |
| **developer** | Full access to S3, EC2, Lambda (no IAM changes) | 8 hours | Yes | Read/Write |
| **admin** | Full AWS access with restrictions | 8 hours | Yes | Administrative |
| **break-glass** | Emergency access (triggers alerts) | 1 hour | Yes | Full Access |

## Security Features

### Authentication & Authorization
- **MFA Enforcement**: All role assumptions require MFA
- **IP Restrictions**: Limit access to specified CIDR ranges
- **External ID**: Unique external IDs for cross-account access
- **Session Policies**: Additional restrictions at assumption time

### Access Controls
- **Permission Boundaries**: Prevent privilege escalation
- **Dangerous Action Blocking**: Block IAM modifications, KMS key deletion
- **Tagging Standards**: Enforce tagging on all resources
- **Rate Limiting**: 100 requests per minute per user

### Monitoring & Compliance
- **CloudTrail Logging**: All role assumptions logged
- **Structured Logging**: JSON logs for all operations
- **Audit Reports**: Daily active session reports
- **Break-glass Alerts**: Real-time notifications for emergency access

## Architecture

```
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   CLI Tool      │────│  API Gateway     │────│  Lambda         │
│                 │    │                  │    │  Functions      │
└─────────────────┘    └──────────────────┘    └─────────────────┘
                                                         │
                                                         ▼
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   S3 Bucket     │    │   DynamoDB       │    │   CloudWatch    │
│   (Templates)   │    │   (Sessions)     │    │   (Logs/Metrics)│
└─────────────────┘    └──────────────────┘    └─────────────────┘
```

## Configuration

### Environment Variables

```bash
# AWS Configuration
export IAM_ROLE_AWS_REGION="us-east-1"
export IAM_ROLE_AWS_ACCOUNT_ID="123456789012"

# Security Configuration
export IAM_ROLE_MFA_REQUIRED="true"
export IAM_ROLE_ALLOWED_IP_RANGES='["10.0.0.0/8", "172.16.0.0/12"]'
export IAM_ROLE_ALLOWED_DEPARTMENTS='["Engineering", "DevOps", "Security"]'

# API Configuration
export IAM_ROLE_RATE_LIMIT_PER_MINUTE="100"
export IAM_ROLE_LOG_LEVEL="INFO"
```

### Policy Templates

Policy templates are stored in S3 and can be customized:

```json
{
  "name": "developer-template",
  "permission_tier": "developer",
  "template_content": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:*\"],\n      \"Resource\": [\"arn:aws:s3:::${projectId}-*\", \"arn:aws:s3:::${projectId}-*/*\"]\n    }\n  ]\n}",
  "variables": ["projectId"],
  "version": "1.0"
}
```

## Development

### Running Tests

```bash
# Install development dependencies
pip install -e ".[dev]"

# Run tests
pytest

# Run tests with coverage
pytest --cov=iam_temprole_creator --cov-report=html
```

### Local Development

```bash
# Install in development mode
pip install -e .

# Run CLI locally
python -m iam_temprole_creator.cli --help
```

## API Reference

### REST API Endpoints

| Method | Endpoint | Description |
|--------|----------|-------------|
| POST | `/request-role` | Request a temporary role |
| GET | `/sessions/{session_id}` | Get session status |
| DELETE | `/sessions/{session_id}` | Revoke a session |
| GET | `/sessions` | List user sessions |

### Example API Request

```bash
curl -X POST https://api.example.com/prod/request-role \
  -H "Content-Type: application/json" \
  -d '{
    "project_id": "my-project",
    "user_id": "john.doe",
    "permission_tier": "read-only",
    "duration_hours": 4,
    "reason": "Security audit review",
    "mfa_used": true
  }'
```

## Troubleshooting

### Common Issues

1. **"MFA required but not used"**
   - Ensure you've used MFA to authenticate with AWS CLI
   - Set `--mfa-used` flag when requesting roles

2. **"IP address not allowed"**
   - Check if your IP is in the allowed ranges
   - Contact administrator to add your IP range

3. **"Session not found"**
   - Verify the session ID is correct
   - Check if the session has expired

4. **"Failed to assume role"**
   - Ensure the role hasn't expired
   - Check if the role was revoked

### Debug Mode

Enable debug logging:

```bash
export IAM_ROLE_LOG_LEVEL="DEBUG"
iam-role-vendor request-role --help
```

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Submit a pull request

## License

MIT License - see LICENSE file for details.

## Support

For support and questions:
- Create an issue in the repository
- Contact the IAM team at iam-team@company.com

## Security

If you discover a security vulnerability, please:
1. Do not create a public issue
2. Email security@company.com
3. Include detailed information about the vulnerability

---

**⚠️ Security Notice**: This tool creates temporary AWS credentials. Always follow your organization's security policies and never share credentials with unauthorized parties.
